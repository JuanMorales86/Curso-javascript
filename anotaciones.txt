clase 2 dia 3

1 = asignacion, == 2 comparacion (== si es igual)



- maineje.js

La función substring:

Permite extraer parte de una cadena. Este método lo tienen todos los strings de JavaScript. La sintaxis es:
    "let cadenaExtraida = cadena.substring(inicio, fin);"

ejemplo:
let cadena = "parzibyte.me";
let extraida = cadena.substring(0, 9);
console.log("Extraída: ", extraida);
/*
Salida:
Extraída:  parzibyte
*/
------------------------------------------------------------------------
Extraer cadena a partir de carácter:

En este caso tenemos la posición o índice de un carácter (el espacio en blanco) a través de indexOf.

A partir del mismo extraemos parte de la cadena, desde 0 hasta el índice obtenido.

De esta manera podemos cortar cadenas en JavaScript basándonos en caracteres buscados usando indexOf.

Recuerda que igualmente puedes cambiar el índice de inicio, no siempre debe ser cero.

let cadena = "JavaScript es un lenguaje muy bueno";
// Buscamos el índice del espacio

let indice = cadena.indexOf(" ");
// Cortar desde 0 hasta la aparición del primer espacio
let extraida = cadena.substring(0, indice);
console.log("Extraída: ", extraida);
/*
Salida:
Extraída:  JavaScript
*/
---------------------------------------------------------------------------
substring y substr en JavaScript: [str.includes(searchString[, position])]

Además de substring, en JavaScript existe la función substr que toma el inicio desde dónde comenzar a cortar la cadena, y la cantidad de caracteres que se deben tomar.

Si te confundes, te recomiendo que uses substring pues es lo más entendible y deseable. Pero para comprobar la diferencia, veamos el siguiente ejemplo:

ejemplo:

let cadena = "JavaScript es un lenguaje muy bueno";
// Este extrae de inicio a fin:
let conSubstring = cadena.substring(17, 25);
console.log("Con substring: ", conSubstring);
// Este extrae N caracteres desde inicio
let conSubstr = cadena.substr(17, 25);
console.log("Con substr: ", conSubstr);
/*
Salida:
Con substring:  lenguaje
Con substr:  lenguaje muy bueno
*/

En la línea 10 estamos usando substring, tomando lo que haya desde la posición 17 hasta la 25.

En cambio, en la línea 13 estamos usando substr tomando 25 caracteres a partir de la posición 17.

Esa es la diferencia, que substring corta desde inicio hasta fin, y substr toma N caracteres a partir de inicio.
-----------------------------------------------------------------
String.prototype.includes():

El método includes() determina si una cadena de texto puede ser encontrada dentro de otra cadena de texto, devolviendo true o false según corresponda.

ejemplo:
const sentence = 'The quick brown fox jumps over the lazy dog.';

const word = 'fox';

console.log(`The word "${word}" ${sentence.includes(word) ? 'is' : 'is not'} in the sentence`);
// Expected output: "The word "fox" is in the sentence"
-----------------------------------------------------------------
Array:

El objeto Array de JavaScript es un objeto global que es usado en la construcción de arrays, que son objetos tipo lista de alto nivel.

ejemplo:

let frutas = ["Manzana", "Banana"]//este array es usado para los demas accesos abajo !OJO

console.log(frutas.length)
// 2

- Acceder a un elemento de Array mediante su índice

let primero = frutas[0]
// Manzana

let ultimo = frutas[frutas.length - 1]
// Banana

- Recorrer un Array

frutas.forEach(function(elemento, indice, array) {
    console.log(elemento, indice);
})
// Manzana 0
// Banana 1

- Añadir un elemento al final de un Array

let nuevaLongitud = frutas.push('Naranja') // Añade "Naranja" al final
// ["Manzana", "Banana", "Naranja"]

- Eliminar el último elemento de un Array

let ultimo = frutas.pop() // Elimina "Naranja" del final
// ["Manzana", "Banana"]

- Añadir un elemento al principio de un Array

let nuevaLongitud = frutas.unshift('Fresa') // Añade "Fresa" al inicio
// ["Fresa" ,"Manzana", "Banana"]

- Eliminar el primer elemento de un Array

let primero = frutas.shift() // Elimina "Fresa" del inicio
// ["Manzana", "Banana"]

- Encontrar el índice de un elemento del Array

frutas.push('Fresa')
// ["Manzana", "Banana", "Fresa"]

let pos = frutas.indexOf('Banana') // (pos) es la posición para abreviar
// 1

- Eliminar un único elemento mediante su posición

Ejemplo:
Eliminamos "Banana" del array pasándole dos parámetros: la posición del primer elemento que se elimina y el número de elementos que queremos eliminar. De esta forma, .splice(pos, 1) empieza en la posición que nos indica el valor de la variable pos y elimina 1 elemento. En este caso, como pos vale 1, elimina un elemento comenzando en la posición 1 del array, es decir "Banana".

let elementoEliminado = frutas.splice(pos, 1)
// ["Manzana", "Fresa"]

- Eliminar varios elementos a partir de una posición parte 2

Nota:
Con .splice() no solo se puede eliminar elementos del array, si no que también podemos extraerlos guardándolo en un nuevo array. ¡Ojo! que al hacer esto estaríamos modificando el array de origen.

let vegetales = ['Repollo', 'Nabo', 'Rábano', 'Zanahoria']
console.log(vegetales)
// ["Repollo", "Nabo", "Rábano", "Zanahoria"]

let pos = 1, numElementos = 2

let elementosEliminados = vegetales.splice(pos, numElementos)
// ["Nabo", "Rábano"] ==> Lo que se ha guardado en "elementosEliminados"

console.log(vegetales)
// ["Repollo", "Zanahoria"] ==> Lo que actualmente tiene "vegetales"

- Copiar un Array

let copiaArray = vegetales.slice();
// ["Repollo", "Zanahoria"]; ==> Copiado en "copiaArray"

- Acceso a elementos de un array:

Los índices de los arrays de JavaScript comienzan en cero, es decir, el índice del primer elemento de un array es 0, y el del último elemento es igual al valor de la propiedad length del array restándole 1.

Si se utiliza un número de índice no válido, se obtendrá undefined.

let arr = ['este es el primer elemento', 'este es el segundo elemento', 'este es el último elemento']
console.log(arr[0])              // escribe en consola 'este es el primer elemento'
console.log(arr[1])              // escribe en consola 'este es el segundo elemento'
console.log(arr[arr.length - 1]) // escribe en consola 'este es el último elemento'

No hay nada especial ni en los arrays de JavaScript ni en sus propiedades que ocasione esto. En JavaScript, las propiedades cuyo nombre comienza con un dígito no pueden referenciarse con la notación punto y debe accederse a ellas mediante la notación corchete.

Por ejemplo, dado un objeto con una propiedad de nombre '3d', sólo podría accederse a dicha propiedad con la notación corchete.

let decadas = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
console.log(decadas.0)  // error de sintaxis
console.log(decadas[0]) // funciona correctamente

- otro ejemplo:

renderizador.3d.usarTextura(modelo, 'personaje.png')
renderizador['3d'].usarTextura(modelo, 'personaje.png')

Obsérvese que, en el último ejemplo, ha sido necesario poner '3d' entre comillas. Es posible usar también comillas con los índices del los arrays de JavaScript (p. ej., decadas['2'] en vez de decadas[2]), aunque no es necesario.

El motor de JavaScript transforma en un string el 2 de decadas[2] a través de una conversión implícita mediante toString. Por tanto, '2' y '02' harían referencia a dos posiciones diferentes en el objeto decadas, y el siguiente ejemplo podría dar true como resultado:

console.log(decadas['2'] != decadas['02'])
-----------------------------------------------------------------
//Probando
let stock = ['cerveza','refresco','patatas']

stock.forEach(function(elemento, indice, array) {
    console.log(elemento, indice);})

    pos = stock.indexOf('refresco') // (pos) es la posición para abreviar ojo: pos no se puede declarar dos veces asi que al de esta linea le quite el let

    let elementoEliminado = stock.splice(pos, 1)
    console.log(elementoEliminado); //por que en el splice al parecer se declara de nuevo
    
    stock.forEach(function(elemento, indice, array) {
        console.log(elemento, indice);})

.......................................................................................
function

- como declarar:
Se declara a través de la palabra reservada function. Deben tener un nombre en minúscula y sin espacios seguidos de los característicos paréntesis (). El contenido de la función se escribe entre las llaves. El nombre de la función no se puede repetir en otra.

function saludar() {
    console.log("Hola estudiantes");
}

- llamado:
Una vez que declaramos la función, podemos usarla en cualquier otra parte del código todas las veces que queramos. 
Para ejecutar una función sólo hay que escribir su nombre y finalizar la sentencia con (). A esto se lo conoce como llamado a la función.

saludar();

Donde escribamos el llamado, se interpretarán las instrucciones definidas en esa función.

ejemplo:
function solicitarNombre(){
    let nombreIngresado   = prompt("Ingresar nombre")
    alert("El nombre ingresado es " + nombreIngresado)
} 

para llamarlo:

solicitarNombre();
solicitarNombre();
solicitarNombre();

- Parametros:
Cuando enviamos a la función uno o más valores para ser empleados en sus operaciones, estamos hablando de los parámetros de la función.

Los parámetros son variables que se declaran dentro de la función, entre sus paréntesis. Los valores de éstos se definen luego en el llamado.

function conParametros(parametro1, parametro2) {
    console.log(parametro1 + " " + parametro2);
}

Así, podemos armar funciones dinámicas que, siguiendo la lógica que queramos, pueden generar distintos resultados al recibir diferentes valores.

El valor que toman estos parámetros se definen en el llamado. Cuando llamamos a la función, los valores que pasamos a la función entre paréntesis se asignan posicionalmente a los parámetros correspondientes, generando posibles resultados diferentes:

conParametros("Hola", "Coder"); // -> “Hola Coder”
conParametros("Cursando", "JS"); // -> “Cursando JS”

Ejemplo de sumar y restar:

//Declaración de variable para guardar el resultado de la suma
let resultado = 0;
//Función que suma dos números y asigna a resultado
function sumar(primerNumero, segundoNumero) {
    resultado = primerNumero + segundoNumero
}
//Función que muestra resultado por consola
function mostrar(mensaje) {
    console.log(mensaje)
}
//Llamamos primero a sumar y luego a mostrar
sumar(6, 3);            
mostrar(resultado); 

//Resultado de una función:
En el ejemplo anterior sumamos dos números a una variable declarada anteriormente. Pero las funciones pueden generar un valor de retorno usando la palabra return, obteniendo el valor cuando la función es llamada.

function sumar(primerNumero, segundoNumero) {
    return primerNumero + segundoNumero;
}
let resultado = sumar(5, 8);

La función puede comportarse como una operación que genera valores (como en las operaciones matemáticas y lógicas previas). 
En el espacio donde se llama a la función se genera un nuevo valor: este valor es el definido por el return de la misma.

let resultado = sumar(5, 8);

console.log(resultado)  // ⇒ 13


- Scope:
El scope o ámbito de una variable es la zona del programa en la cual se define, el contexto al que pertenece la misma dentro de un algoritmo, restringiendo su uso y alcance.

JavaScript define dos ámbitos para las variables: 
global y local.

- Globales
let resultado = 0
function sumar(primerNumero, segundoNumero) {
    resultado = primerNumero + segundoNumero;
}
sumar(5,6);
//Se puede acceder a la variable resultado porque es global
console.log(resultado);

Puede ser referenciada desde cualquier punto del programa.

- Locales:
Cuando definimos una variable dentro de una función o bloque es una variable local,  y será accesible sólo dentro de ese espacio. Si queremos utilizarla por fuera, la variable no existirá para JS.


function sumar(primerNumero, segundoNumero) {
    let resultado = primerNumero + segundoNumero;
}
//No se puede acceder a la variable resultado fuera del bloque
console.log(resultado);

- Ejemplo variabl slocales y Globales:

let nombre = “John Doe” // variable global

function saludar() {
    let nombre = “Juan Coder” // variable local
    console.log(nombre)
}
//Accede a nombre global
console.log(nombre)   // → “John Doe”

//Accede a nombre local
saludar() // → “Juan Coder”

Hay que entender que las variables globales y locales se identifican como diferentes entre sí, y pueden existir en el programa bajo el mismo nombre sin conflicto.

-Scope:

Entender que cada scope local es un espacio cerrado nos permite crear bloques de trabajo bien diferenciados e independientes, sin preocuparnos por repetir nombres de variables, sabiendo que se entienden como diferentes según donde las llamemos.

function sumar(num1, num2) {
     let resultado = num1 + num2
	 return resultado
}

function restar(num1, num2) {
     let resultado = num1 - num2
	 return resultado
}

-Funiones anonimas:
Una función anónima es una función que se define sin nombre y se utiliza para ser pasada como parámetro o asignada a una variable. En el caso de asignarla a una variable, pueden llamar usando el identificador de la variable declarada.

//Generalmente, las funciones anónimas se asignan a variables declaradas como constantes
const suma  = function (a, b) { return a + b }
const resta = function (a, b) { return a - b }
console.log( suma(15,20) )
console.log( resta(15,5) )

// FUNCIONES FLECHAS:
Identificamos a las funciones flechas como funciones anónimas de sintaxis simplificada. Están disponibles desde la versión ES6 de JavaScript, no usan la palabra function pero usa => (flecha) entre los parámetros y el bloque.

const suma  = (a, b) => { return a + b }
//Si es una función de una sola línea con retorno podemos evitar escribir el cuerpo.
const resta = (a, b) =>  a - b ;
console.log( suma(15,20) )
console.log( resta(20,5) )
----------------------------------------------------------------------
Objetos:
En JS, los objetos son estructuras que podemos definir para agrupar valores bajo un mismo criterio. Podemos decir que un objeto es una colección de datos relacionados como una entidad. Se componen de un listado de pares clave-valor, es decir, contienen propiedades y valores agrupados.

La utilidad de los objetos deviene de su composición por varios valores y operaciones comunes (funciones) para todos los elementos de este tipo y sus propiedades".

Un objeto literal se define directamente entre llaves { }
Los valores que almacenan se listan separados por coma, bajo la forma propiedad: valor

const persona1 = { 
     nombre: "Homero", 
     edad: 39, 
     calle: "Av. Siempreviva 742" 
}

ejemplo:

const persona1 = { nombre: "Homero",
                   edad: 39,
                   calle: "Av. Siempreviva 742"}
                   
console.log(persona1.nombre) // Homero
console.log(persona1.edad) // 39
console.log(persona1.calle) // Av. Siempreviva 742

- Asignar valores a las propiedades
Es posible usar las dos formas( corchetes y paréntesis) para acceder a las propiedades y asignar nuevos valores a los datos almacenados en las propiedades del objeto.

ejemplo:

const persona1 = { nombre: "Homero",
                   edad: 39,
                   calle: "Av. Siempreviva 742"}
                   
persona1["nombre"] = "Marge" //asigna un valor nuevo o dato dentro del objeto
persona1.edad = 36

-- Objetos y contructorefa

- Constructores:
En JS, el constructor de un objeto es una función que usamos para crear un nuevo objeto cada vez que sea necesario. Con esta “función constructora” podemos inicializar las propiedades del objeto al momento de ser instanciado con new.

ejemplo"
function Persona(nombre, edad, calle) {
    this.nombre = nombre;
    this.edad 	 = edad;
    this.calle  = calle;
}
const persona1 = new Persona("Homero", 39, "Av. Siempreviva 742"); //asi se invoca al contructor
const persona2 = new Persona("Marge", 36, "Av. Siempreviva 742");

- Constructor y New
En el ejemplo anterior, se define la función Persona, donde se asignan las diferentes propiedades con los valores recibidos como parámetros.

Luego, en algún lugar del código posterior a esas líneas, se puede construir un objeto Persona declarando una variable y asignando la referencia del objeto instanciado mediante la instrucción new Persona(...)

-- uso del this
La palabra clave this (“este”) refiere al elemento actual en el que se está escribiendo el código.  Cuando se emplea un función constructora para crear un objeto (con la palabra clave new), this está enlazado al nuevo objeto instanciado.
This es muy útil para asegurar que se emplean las propiedades del objeto actual.

ejemplo:
function Persona(literal) {//literal es un objeto
    this.nombre = literal.nombre; 
    this.edad   = literal.edad;
    this.calle  = literal.calle;
}
const persona1 = new Persona({ nombre: "Homero", edad: 39, calle: "Av.Siempreviva 742" });// palabra reservada new

-- Metoos y operaciones con objetos

- METODO <> FUNCION:
Como vimos anteriormente, las funciones en JS se pueden definir en cualquier parte del código, y pueden ser llamadas desde cualquier otra parte del código posterior.

Los métodos de los objetos también son técnicamente funciones, sólo que se limitan a poder ser ejecutados solo desde el mismo objeto.

Funcion
//Funciones: Generalmente retornar un valor y son de acceso global.
function f1(){
    return this;
}

METODO
//Métodos: Se requiere un objeto y puede no retornar un valor.
function Persona(nombre, edad, calle) {
    this.nombre = nombre;
    this.edad = edad;
    this.calle = calle;
}

- Metodos en objetos JS

JavaScript cuenta con sus propios objetos, incluso ya usamos algunos de ellos sin identificar que son objeto.
Por ejemplo: Cada vez que creamos una cadena de caracteres se crea automáticamente como una instancia del objeto String y, por lo tanto, tiene varios métodos/propiedades comunes disponibles en ella.

ejemplo
let cadena = "HOLA CODER";
//Propiedad de objeto String: Largo de la cadena.
console.log(cadena.length);
//Método de objeto String: Pasar a minúscula.
console.log(cadena.toLowerCase());
//Método de objeto String: Pasar a mayúscula.
console.log(cadena.toUpperCase());


- Metodos personalizadofa-spin
Podemos crear nuestros propios métodos para objetos personalizados, referenciando funciones por su nombre o definiendo funciones anónimas asociadas a una propiedad de la función constructora. 
Llamar a un método es similar a acceder a una propiedad, pero se agrega () al final del nombre del método, posiblemente con argumentos.

ejemplo:
function Persona(nombre, edad, calle) {
    this.nombre = nombre;
    this.edad   = edad;
    this.calle  = calle;
    this.hablar = function(){ console.log("HOLA SOY "+ this.nombre)}
}
const persona1 = new Persona("Homero", 39, "Av. Siempreviva 742");
const persona2 = new Persona("Marge", 36, "Av. Siempreviva 742");
persona1.hablar();
persona2.hablar();

- Operador IN Y FOR.... IN
El operador in devuelve true si la propiedad especificada existe en el objeto. 
Mientras que el bucle for...in permite acceder a todas las propiedades del objeto, obteniendo una propiedad por cada iteración.


ejemplo:
const persona1 = { nombre: "Homero", edad: 39, calle: "Av. Siempreviva 742"};
//devuelve true porque la clave "nombre" existe en el objeto persona1
console.log( "nombre" in persona1);
//devuelve false porque la clave "origen" no existe en el objeto persona1
console.log( "origen" in persona1);
//recorremos todas las propiedades del objeto con el ciclo for...in
for (const propiedad in persona1) {
    console.log(persona1[propiedad]);
}

-- CLASES

Las clases de JavaScript, introducidas en ES6, proveen una sintaxis mucho más clara y simple para crear objetos personalizados.
Son una equivalencia al empleo de función constructora y permite definir distintos tipos de métodos. 


ejemplo:
class Persona{
    constructor(nombre, edad, calle) {
        this.nombre = nombre;
        this.edad   = edad;
        this.calle  = calle;
    }
}
const persona1 = new Persona("Homero", 39, "Av. Siempreviva 742");

- CLASES Y Metodos
En la declaración de clase, la función constructora es reemplazada por el método constructor. Los métodos en las clases no referencian a propiedades, se declaran dentro del bloque sin la palabra function.


ejemplo:
class Persona{
    constructor(nombre, edad, calle) {
        this.nombre = nombre;
        this.edad   = edad;
        this.calle  = calle;
    }
    hablar(){
        console.log("HOLA SOY "+ this.nombre);
    }
}
const persona1 = new Persona("Homero", 39, "Av. Siempreviva 742");
persona1.hablar();

- Ejemplo
class Producto {
    constructor(nombre, precio) {
        this.nombre  = nombre.toUpperCase();
        this.precio  = parseFloat(precio);
        this.vendido = false;
    }
    sumaIva() {
        this.precio = this.precio * 1.21;
    }
    vender() {
        this.vendido = true;
    }
}
const producto1 = new Producto("arroz", "125");
const producto2 = new Producto("fideo", "50");
producto1.sumaIva();
producto2.sumaIva();
producto1.vender();

- RESUMEN DE LO VISTO
Los objetos tienen propiedades y métodos.
El método constructor de un objeto sirve para crear el mismo y asignarle sus propiedades. Permite crear varios objetos usando el mismo constructor.
Las funciones de JS son generalmente de acceso global y los métodos son únicamente utilizados para ser invocados por los objetos que lo contienen.
Las clases son otra forma de crear objetos personalizados en JS.

